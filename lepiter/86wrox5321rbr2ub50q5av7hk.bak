{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T09:50:04.219+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T16:16:14.373+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "eNq04Gj2DQCQFUqDDTVfig=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : " "
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T09:50:09.056+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T14:01:33.981+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AKn+4Gj2DQCQGIC4DTVfig=="
				},
				"code" : "jsonString := '{\r  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\r  \"description\": \"A simple bar chart with embedded data.\",\r  \"data\": {\r    \"values\": [\r      {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\r      {\"a\": \"D\", \"b\": 6}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\r      {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}, {\"a\": \"I\", \"b\": 52},{\"a\": \"I\", \"b\": 52} , {\"a\": \"I\", \"b\": 52}, {\"a\": \"K\", \"b\": 52}\r    ]\r  },\r  \"mark\": \"bar\",\r  \"encoding\": {\r    \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\r    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\r  }\r}'.\rdict:= STONJSON fromString: jsonString."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T09:50:30.653+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T11:33:06.884+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "SDRI4mj2DQCQXhUJDTVfig=="
				},
				"code" : "ruleClass :=  LARBarSpecUpdaterRule. \rrule:= ruleClass for: dict. \rrule updateDictHeight.\rdict"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T17:26:39.448+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T17:26:58.49+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wB+j9Of2DQCJlOIGCnRLnQ=="
				},
				"code" : "aNumber := 3.\r\rwidth := 600 / aNumber.\r\tdict at: 'data' at: 'width' put: width. \r\tdict"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T10:10:36.561+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T10:11:29.575+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "mB413eH2DQC2SR0rAuxa3w=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The rule also works when calling the method on the plotter. "
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T10:06:04.73+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T10:49:21.555+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wE4BzeH2DQCzCp9EAuxa3w=="
				},
				"code" : "plotter := LarPlotterBar new. \rplotter spec: jsonString. \r\rplotter"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T12:11:44.267+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T12:11:50.635+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "COPe2mr2DQCanO4+AEPt2A=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I was experimenting around here"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T11:58:53.543+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-16T12:08:48.086+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "iPJorWr2DQCX9B8zDTVfig=="
				},
				"code" : "ele := dict at: 'data' at: 'values'. \"collect: #values\"\r\tdata := ele collect: [ :each | each at: 'b'].\r\tmax := data max.\rscale := 500 / max.\r\tmodifiedData := OrderedCollection new.\r\tdata do: [:each | modifiedData add: (each * scale)].\ri:= 1.\r\tele do: [ :each | each at: 'b' put: (modifiedData at: i) .\r\ti:= i+1]. \r\tdict at: 'data' at: 'values' put: ele.\r\t^dict."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-23T09:04:41.285+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-23T09:22:32.956+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ALpLD/X2DQCuSSArANXeSg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Idea behind this rule:  We have the height and an ideal space of how much the ticks should be apart. we additionally have a minimum and a maximum of ticks per graph. we then calculate the amout of ticks that would make sense with the spaces we have. This is all to scale since we have scaled up/down the bars. \r\nWe then look ath the value of the space and try to find the best and nearest space for the ticks.  "
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-22T14:59:58.777+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-23T11:07:14.01+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2IIT6OX2DQCcmfNPAuPqQA=="
				},
				"code" : "idealSpace := 70.\rmaxSpace := 500.\rmin_ticks := 4.\rmax_ticks := 8. \rscale:= (500/87).\rarr := #(1 2 5 10 50 100 200).\r\rnum_ticks := (maxSpace/scale) / (idealSpace/scale). \r\r\rnum_ticks := (min_ticks max: (num_ticks min: max_ticks)).\rnum_ticks := num_ticks rounded.\rnum:= (maxSpace/scale)/num_ticks.\r\rnearest := (arr collect: [ :each | (each - num) abs ]). \rmin:= nearest min. \r\rindexofMin := nearest indexOf: min. \rindexofMin.\r\rspace := arr at: indexofMin.\ramount := (maxSpace / scale) / space.\ramount := amount roundDownTo: 0\r\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-07-16T09:50:04.185+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-07-16T09:50:04.185+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Playing around with rules"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "a855b4e0-68f6-0d00-9014-c8b60d355f8a"
	}
}